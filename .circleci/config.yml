# version: 2.1

# orbs:
#   node: circleci/node@5

# jobs:
#   build-node:
#     executor: node/default
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - run:
#           name: Print node install help instructions
#           command: |
#             echo "One cause for node package install failure is if you have private repositories that it can't reach"
#             echo "One way to fix this for private npm packages:"
#             echo "  1. Use the npm CLI's 'login' command to create a token (usually saved in your user's '~/.npmrc' file)"
#             echo "     For more info, see https://circleci.com/blog/publishing-npm-packages-using-circleci-2-0/#:~:text=set%20the%20%24npm_token%20environment%20variable%20in%20circleci"
#             echo "  2. Add an NPM_TOKEN to an org context"
#             echo "     For info on how to use contexts, see https://circleci.com/docs/contexts/"
#             echo "  3. Add a '.circleci/config.yml' to your repository or use this config.yml as a starting template"
#             echo "  4. Configure the jobs to use the context that includes NPM_TOKEN"
#             echo "  5. Add a step to inject your NPM_TOKEN environment variable into npm before 'install-packages'"
#             echo "     For an example, see https://circleci.com/blog/publishing-npm-packages-using-circleci-2-0/#:~:text=the%20deploy%20job%20has%20several%20steps%20that%20run%20to%20authenticate%20with%20and%20publish%20to"
#           when: on_fail
#       - run:
#           command: npm run build
#       - run:
#           name: Create the ~/artifacts directory if it doesn't exist
#           command: mkdir -p ~/artifacts
#       # Copy output to artifacts dir
#       - run:
#           name: Copy artifacts
#           command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
#       - store_artifacts:
#           path: ~/artifacts
#           destination: node-build
#       - run:
#           name: Send Discord Notification
#           command: |
#             DISCORD_WEBHOOK_URL="https://discord.com/api/webhooks/1203163354680655902/OnCfXS-HFyfVYeWglQPR_EJA6HzzRLurRgDt7P0RwPvPUxkea6Z-ncp4AoffsRsWMVB0"
#             curl -X POST -H "Content-Type: application/json" -d '{
#               "content": "Build Status: '"$CIRCLE_BUILD_URL"'",
#               "embeds": [
#                 {
#                   "title": "Build Details",
#                   "fields": [
#                     {
#                       "name": "Branch",
#                       "value": "'"$CIRCLE_BRANCH"'"
#                     },
#                     {
#                       "name": "Status",
#                       "value": "'"$CIRCLE_STATUS"'"
#                     }
#                   ]
#                 }
#               ]
#             }' $DISCORD_WEBHOOK_URL

# workflows:
#   version: 2
#   build:
#     jobs:
#       - build-node
version: 2.1

orbs:
  discord: antonioned/discord@0.1.0

workflows:
  version: 2
  build:
    jobs:
      - discord/status

jobs:
  build-node:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Print node install help instructions
          command: |
            echo "One cause for node package install failure is if you have private repositories that it can't reach"
            echo "One way to fix this for private npm packages:"
            echo "  1. Use the npm CLI's 'login' command to create a token (usually saved in your user's '~/.npmrc' file)"
            echo "     For more info, see https://circleci.com/blog/publishing-npm-packages-using-circleci-2-0/#:~:text=set%20the%20%24npm_token%20environment%20variable%20in%20circleci"
            echo "  2. Add an NPM_TOKEN to an org context"
            echo "     For info on how to use contexts, see https://circleci.com/docs/contexts/"
            echo "  3. Add a '.circleci/config.yml' to your repository or use this config.yml as a starting template"
            echo "  4. Configure the jobs to use the context that includes NPM_TOKEN"
            echo "  5. Add a step to inject your NPM_TOKEN environment variable into npm before 'install-packages'"
            echo "     For an example, see https://circleci.com/blog/publishing-npm-packages-using-circleci-2-0/#:~:text=the%20deploy%20job%20has%20several%20steps%20that%20run%20to%20authenticate%20with%20and%20publish%20to"
          when: on_fail
      - run:
          command: npm run build
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      # Copy output to artifacts dir
      - run:
          name: Copy artifacts
          command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
      - store_artifacts:
          path: ~/artifacts
          destination: node-build
      - run:
          name: Send Discord Notification
          command: |
            DISCORD_WEBHOOK_URL="https://discord.com/api/webhooks/1203163354680655902/OnCfXS-HFyfVYeWglQPR_EJA6HzzRLurRgDt7P0RwPvPUxkea6Z-ncp4AoffsRsWMVB0"
            curl -X POST -H "Content-Type: application/json" -d '{
              "content": "Build Status: '"$CIRCLE_BUILD_URL"'",
              "embeds": [
                {
                  "title": "Build Details",
                  "fields": [
                    {
                      "name": "Branch",
                      "value": "'"$CIRCLE_BRANCH"'"
                    },
                    {
                      "name": "Status",
                      "value": "'"$CIRCLE_STATUS"'"
                    }
                  ]
                }
              ]
            }' $DISCORD_WEBHOOK_URL

commands:
  status:
    description: >
      Send a status alert at the end of a job based on success or failure.
      Must be the last step in a job.
    parameters:
      webhook:
        type: string
        default: DISCORD_WEBHOOK_URL="https://discord.com/api/webhooks/1203163354680655902/OnCfXS-HFyfVYeWglQPR_EJA6HzzRLurRgDt7P0RwPvPUxkea6Z-ncp4AoffsRsWMVB0"
        description: >
          Enter either your Webhook value or use the CircleCI UI to add your
          token under the 'DISCORD_WEBHOOK' env var
      success_message:
        type: string
        default: ":tada: A $CIRCLE_JOB job has succeeded!"
        description: Enter custom message.
      failure_message:
        type: string
        default: ":red_circle: A $CIRCLE_JOB job has failed!"
        description: Enter custom message.
      success_only:
        type: boolean
        default: false
        description: >
          If `true`, notifications of failed jobs will not be sent.
      fail_only:
        type: boolean
        default: false
        description: >
          If `true`, notifications of successful jobs will not be sent.
      mentions:
        type: string
        default: ""
        description: >
          A comma separated list of user IDs. No spaces.
      only_for_branches:
        type: string
        default: ""
        description: >
          If set, a comma-separated list of branches for which to send
          notifications. No spaces.
      channel:
        type: string
        default: ""
        description: >
          ID of channel if set, overrides webhook's default channel setting

    steps:
      - run:
          name: Provide error if curl is not installed.
          command: |
            which curl > curl_exists; echo $? | grep -q '1' && echo curl not installed && rm curl_exists && exit 1
            rm curl_exists
      - run:
          name: Discord - Setting Failure Condition
          command: |
            echo 'export DISCORD_BUILD_STATUS="fail"' >> $BASH_ENV
          when: on_fail

      - run:
          name: Discord - Setting Success Condition
          command: |
            echo 'export DISCORD_BUILD_STATUS="success"' >> $BASH_ENV
          when: on_success

      - run:
          name: Provide error if non-bash shell
          command: |
            if [ ! -x /bin/bash ]; then
              echo Bash not installed.
              exit 1
            fi
      - run:
          name: Discord - Sending Status Alert
          shell: /bin/bash
          when: always
          command: |
            current_branch_in_filter=false

            IFS="," read -ra BRANCH_FILTERS \<<< "<< parameters.only_for_branches >>"

            for i in "${BRANCH_FILTERS[@]}"; do
              if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
                current_branch_in_filter=true
              fi
            done

            if [ "x" == "x<< parameters.only_for_branches>>" ] || [ "$current_branch_in_filter" = true ]; then
              # Provide error if no webhook is set and error. Otherwise continue
              if [ -z "<< parameters.webhook >>" ]; then
                echo "NO DISCORD WEBHOOK SET"
                echo "Please input your DISCORD_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
                exit 1
              else
                #Create Members string
                if [ -n "<< parameters.mentions >>" ]; then
                  IFS="," read -ra DISCORD_MEMBERS \<<< "<< parameters.mentions >>"
                  for i in "${DISCORD_MEMBERS[@]}"; do
                    if [ $(echo ${i} | head -c 1) == "S" ]; then
                      DISCORD_MENTIONS="${DISCORD_MENTIONS}<!subteam^${i}> "
                    elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                      DISCORD_MENTIONS="${DISCORD_MENTIONS}<!${i}> "
                    else
                      DISCORD_MENTIONS="${DISCORD_MENTIONS}<@${i}> "
                    fi
                  done
                fi
                #If successful
                if [ "$DISCORD_BUILD_STATUS" = "success" ]; then
                  #Skip if fail_only
                  if [ << parameters.fail_only >> = true ]; then
                    echo "The job completed successfully"
                    echo '"fail_only" is set to "true". No Discord notification sent.'
                  else
                    curl -H 'Content-Type: application/json' -X POST \
                      -d "{ \
                        \"embeds\": [ \
                            { \
                                \"description\": \"<< parameters.success_message >>\", \
                                \"color\": 3394662, \
                                \"fields\": [ \
                                    { \
                                        \"name\": \"Project\", \
                                        \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                        \"inline\": true \
                                    }, \
                                    { \
                                        \"name\": \"Job Number\", \
                                        \"value\": \"$CIRCLE_BUILD_NUM\", \
                                        \"inline\": true \
                                    }, \
                                    { \
                                        \"name\": \"URL\", \
                                        \"value\": \"[Visit Job]($CIRCLE_BUILD_URL)\" \
                                    } \
                                  ] \
                            } \
                          ] \
                      } " << parameters.webhook >>
                    echo "Job completed successfully. Alert sent."
                  fi
                else
                  #If Failed
                  #Skip if success_only
                  if [ << parameters.success_only >> = true ]; then
                    echo "The job failed"
                    echo '"success_only" is set to "true". No Discord notification sent.'
                  else
                    curl -H "Content-Type: application/json" -X POST -d \
                    "{ \
                        \"embeds\": [ \
                            { \
                                \"description\": \"<< parameters.failure_message >>\", \
                                \"color\": 15555676, \
                                \"fields\": [ \
                                    { \
                                        \"name\": \"Project\", \
                                        \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                        \"inline\": true \
                                    }, \
                                    { \
                                        \"name\": \"Job Number\", \
                                        \"value\": \"$CIRCLE_BUILD_NUM\", \
                                        \"inline\": true \
                                    }, \
                                    { \
                                        \"name\": \"URL\", \
                                        \"value\": \"[Visit Job]($CIRCLE_BUILD_URL)\" \
                                    } \
                                  ] \
                            } \
                          ] \
                      }" << parameters.webhook >>
                    echo "Job failed. Alert sent."
                  fi
                fi
              fi
            else
              echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
            fi

  approval:
    description: Send a notification that a manual approval job is ready
    parameters:
      channel:
        default: ""
        description: |
          ID of channel if set, overrides webhook's default channel setting
        type: string
      color:
        default: "3843043"
        description: Decimal color value for notification attachment color.
        type: string
      mentions:
        default: ""
        description: A comma separated list of user IDs. No spaces.
        type: string
      message:
        default: A workflow in CircleCI is awaiting your approval.
        description: Enter custom message.
        type: string
      url:
        default: https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}
        description: The URL to link back to.
        type: string
      webhook:
        default: DISCORD_WEBHOOK_URL="https://discord.com/api/webhooks/1203163354680655902/OnCfXS-HFyfVYeWglQPR_EJA6HzzRLurRgDt7P0RwPvPUxkea6Z-ncp4AoffsRsWMVB0"
        description: Enter either your Webhook value or use the CircleCI UI to add your token under the 'DISCORD_WEBHOOK_URL' env var
        type: string

    steps:
      - run:
          name: Provide error if non-bash shell
          command: |
            if [ ! -x /bin/bash ]; then
              echo Bash not installed.
              exit 1
            fi
      - run:
          name: Discord - Sending Approval Notification
          command: |
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "<< parameters.webhook >>" ]; then
              echo "NO DISCORD WEBHOOK SET"
              echo "Please input your DISCORD_WEBHOOK_URL value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "<< parameters.mentions >>" ]; then
                IFS="," read -ra DISCORD_MEMBERS \<<< "<< parameters.mentions >>"
                for i in "${DISCORD_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    DISCORD_MENTIONS="${DISCORD_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    DISCORD_MENTIONS="${DISCORD_MENTIONS}<!${i}> "
                  else
                    DISCORD_MENTIONS="${DISCORD_MENTIONS}<@${i}> "
                  fi
                done
              fi

              curl -H "Content-Type: application/json" -X POST -d \
                  "{ \
                    \"embeds\": [ \
                      { \
                        \"description\": \"<< parameters.message >>\", \
                        \"color\": 3843043, \
                        \"fields\": [ \
                          { \
                            \"name\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"inline\": true \
                          }, \
                          { \
                            \"name\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"inline\": true \
                          }, \
                          { \
                            \"name\": \"URL\", \
                            \"value\": \"[Visit Workflow](https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID})\" \
                          } \
                        ] \
                      } \
                    ] \
                }" << parameters.webhook >>
              echo "Awaiting approval notified."
            fi
          shell: /bin/bash

example:
  status:
    description: Send a CircleCI job status.
    usage:
      version: 2.1
      orbs:
        discord: antonioned/discord@0.1.0
      jobs:
        tests:
          steps:
            - discord/status
  approval:
    description: Notify a Discord channel of a pending approval.
    usage:
      version: 2.1
      orbs:
        discord: antonioned/discord@0.1.0
      jobs:
        tests:
          steps:
            - discord/approval
